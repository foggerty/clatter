* Clatter
Outputs text files slowly, with accompanying noises.  Inspired by classic sci-fi movies' visions of what computer terminals would look (and sound like) in the future.

But mostly, it's to help me remember how to write code in C again, because it's literally been a couple of decades since I last wrote anything in it, and .NET is boring the hell out of me.


* Milestones
- [X] Pipe a file to stdout that's been specified in args.
- [X] Repeat, but use ncurses lib for display.
- [X] Hard-coded (i.e. not a theme) stuttered output.
- [ ] Simple theme, just repeat the same stuttered output, but fed in via a theme.
- [ ] Utility function to dump terminal capabilities, based off of what ncurses thinks can be done - which is all the program can do, since we're using ncurses for all output.
- [ ] Allow to read in from stdin (pipe) if a file isn't specified.
- [ ] Sound support - no idea what the latest/greatest is in Linux these days.
- [ ] Full 'Mother' theme, visuals and sounds.
- [ ] Add another theme.
- [ ] Repeat.
- [ ] Make everything UTF-8 capable; how hard can it be?


* ToDO
- [X] Setup a make file.
- [X] Determine if still need .ccls file.  I have a vague memory of reading somewhere that it can leverage make files? (It doesn't, but first call to lsp does everything it needs.)
- [X] Stop Emacs forom inserting new lines with ';'
- [X] Look into static analysers for C - [[https://github.com/alexmurray/flycheck-clang-analyzer][start here]]
- [X] Update formatting to enforce whitespace between things like 'i = 0;'.  NOTE: it looks like Emacs only does this on a newline (if auto-newline is enabled) or when typing something like an opening brace.  Solved - pass everything off to lsp mode :-)
- [X] Rename Stutter to stammer, i.e. try out refactoring tools.  tl;dr they all suck for C unless you're using a full IDE.
- [X] Get a quick overview of what the current sound landscape looks like.
- [X] Look into how C handles function pointers, and come up with a scheme for themes that allows the main program to call things like next_char, end_of_line, new_line etc, and have the theme decide how they should be handled (can then mix and match various parts of each theme).
- [X] 'port' stammer to the new theme thingie.
- [ ] Have a play with valgrind, see if it turns anything up.
- [ ] Add audio support......  Surely it cannot be /that/ painful....?
- [ ] Learn how to turn off alignment features when using lsp-format-buffer
- [ ] Make stammer go 'click' when it prints a normal char, and a deeper 'click' for when stammering.
- [ ] Look into 'modules' in C, and best-practices for things like the placement of the themes array, avoiding naming conflicts etc.  This will hurt :-(
