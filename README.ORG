* Clatter
Outputs text files slowly, with accompanying noises.  Inspired by classic sci-fi movies' visions of what computer terminals would look (and sound like) in the future.

But mostly, it's to help me remember how to write code in C again, because it's literally been a couple of decades since I last wrote anything in it, and .NET is boring the hell out of me.


* Milestones
- [X] Pipe a file to stdout that's been specified in args.
- [X] Repeat, but use ncurses lib for display.
- [X] Hard-coded (i.e. not a theme) stuttered output.
- [ ] Simple theme, just repeat the same stuttered output, but fed in via a theme.
- [ ] Utility function to dump terminal capabilities, based off of what ncurses thinks can be done - which is all the program can do, since we're using ncurses for all output.
- [ ] Allow to read in from stdin (pipe) if a file isn't specified.
- [ ] Sound support - no idea what the latest/greatest is in Linux these days.
- [ ] Full 'Mother' theme, visuals and sounds.
- [ ] Add another theme.
- [ ] Repeat.
- [ ] Make everything UTF-8 capable; how hard can it be?


* ToDO
- [X] Setup a make file.
- [X] Determine if still need .ccls file.  I have a vague memory of reading somewhere that it can leverage make files? (It doesn't, but first call to lsp does everything it needs.)
- [ ] Stop Emacs forom inserting new lines with ';'
- [ ] Update formatting to enforce whitespace between things like 'i = 0;'
- [ ] Rename Stutter to stammer, try out refactoring tools...
- [ ] Look into static analysers for C.
- [ ] Look into 'modules' in C, and best-practices for things like the placement of the themes array, avoiding naming conflicts etc.
